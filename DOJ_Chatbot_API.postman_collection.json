{
	"info": {
		"_postman_id": "doj-chatbot-api-collection",
		"name": "DOJ Chatbot API",
		"description": "Complete test collection for DOJ Chatbot API with rate limiting and authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Rate Limiting",
			"item": [
				{
					"name": "Check Rate Limit Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/rate-limit-status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"rate-limit-status"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Rate limit status structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('remaining_requests');",
									"    pm.expect(jsonData).to.have.property('requests_used');",
									"    pm.expect(jsonData).to.have.property('max_requests');",
									"    pm.expect(jsonData).to.have.property('rate_limited');",
									"    pm.expect(jsonData).to.have.property('time_until_reset');",
									"});",
									"",
									"pm.test(\"Remaining requests is valid\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.remaining_requests).to.be.at.least(0);",
									"    pm.expect(jsonData.remaining_requests).to.be.at.most(jsonData.max_requests);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "Chat API",
			"item": [
				{
					"name": "Send Chat Message",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"What are the basic rights of a defendant in criminal court?\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/chat",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Has response field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('response');",
									"});",
									"",
									"pm.test(\"Response is not empty\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.not.be.empty;",
									"});",
									"",
									"// Check if rate limited",
									"const jsonData = pm.response.json();",
									"if (jsonData.rate_limited) {",
									"    pm.test(\"Rate limited response structure\", function () {",
									"        pm.expect(jsonData).to.have.property('rate_limited', true);",
									"        pm.expect(jsonData).to.have.property('retry_after');",
									"        pm.expect(jsonData.retry_after).to.be.a('number');",
									"    });",
									"} else {",
									"    pm.test(\"Normal response received\", function () {",
									"        pm.expect(jsonData.rate_limited).to.be.undefined;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Send Empty Message",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": \"\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/chat",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns error for empty message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.include(\"Please provide a message\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Send Missing Message",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_url}}/chat",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns error for missing message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.include(\"Please provide a message\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login Page",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns HTML content\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<html\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Register Page",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns HTML content\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<html\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Verify Token - Success",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"valid_firebase_token_here\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/verify-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"verify-token"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 401\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"Has success field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Verify Token - No Token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_url}}/verify-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"verify-token"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Returns error for missing token\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error).to.include(\"No token provided\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Logout",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302 (redirect)\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Redirects to login\", function () {",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.include(\"/login\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "Pages",
			"item": [
				{
					"name": "Main Index",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 302 (redirect to login)\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"pm.test(\"Redirects to login when not authenticated\", function () {",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.include(\"/login\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Live Stream",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/live_stream",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"live_stream"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns HTML content\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<html\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Knowledge Base",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/knowledge_base",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"knowledge_base"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns HTML content\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<html\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Private Chat",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/private-chat",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"private-chat"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns HTML content\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<html\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "Email",
			"item": [
				{
					"name": "Send Email",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "John Doe",
									"type": "text"
								},
								{
									"key": "email",
									"value": "john@example.com",
									"type": "text"
								},
								{
									"key": "message",
									"value": "This is a test message from Postman",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/send-email",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"send-email"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 500\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 500]);",
									"});",
									"",
									"pm.test(\"Returns text response\", function () {",
									"    pm.expect(pm.response.text()).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "Speech to Text",
			"item": [
				{
					"name": "Speech Recognition",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"audio\": \"data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBSuBzvLZiTYIG2m98OScTgwOUarm7blmGgU7k9n1unEiBC13yO/eizEIHWq+8+OWT...\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/speech-to-text",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"speech-to-text"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 500]);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"if (jsonData.text) {",
									"    pm.test(\"Has text field for success\", function () {",
									"        pm.expect(jsonData).to.have.property('text');",
									"    });",
									"} else if (jsonData.error) {",
									"    pm.test(\"Has error field for failure\", function () {",
									"        pm.expect(jsonData).to.have.property('error');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Speech Recognition - No Audio",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_url}}/speech-to-text",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"speech-to-text"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Returns error for missing audio\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include(\"No audio data received\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "Error Handling",
			"item": [
				{
					"name": "Invalid Endpoint",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/invalid-endpoint",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"invalid-endpoint"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Invalid JSON",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "Invalid JSON here"
						},
						"url": {
							"raw": "{{base_url}}/chat",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"chat"
							]
						}
					},
					"response": [],
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://127.0.0.1:5002",
			"type": "string"
		}
	]
} 